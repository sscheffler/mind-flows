"use strict";

var mongo_connector_1 = require("../../backend/mongo-connector");
var model_1 = require("../../../model/model");
var logger_1 = require("../../logger");
var MindFlowController = {
    findAll: function (req, res) {
        var userId = req.query.userId;
        logger_1.logger.debug("Find All mind flows for user : " + userId);
        mongo_connector_1.MongoMindFlow.find({ userId: userId }, function (err, flows) {
            if (err) return res.json(500, { message: 'ERROR', content: err });
            var response = model_1.Response.aSuccess(flows);
            res.json(response.status, response.body);
            res.end();
        });
    },
    create: function (req, res) {
        var body = req.body;
        logger_1.logger.debug("Create mind flow for user : " + body.userId);
        if (body) {
            var mongoMindFlow = new mongo_connector_1.MongoMindFlow(body);
            mongoMindFlow.save(function (err, flow) {
                var response = err && model_1.Response.aError(err) || model_1.Response.aSuccess(flow);
                res.json(response.status, response.body);
                res.end();
            });
        }
    },
    findFlow: function (req, res) {
        var flowId = req.params.flowId;
        logger_1.logger.debug("mind-flow: " + flowId);
        mongo_connector_1.MongoMindFlow.findOne({ _id: flowId }, function (err, flow) {
            if (err) return res.json(500, { message: 'ERROR', content: err });
            var response = model_1.Response.aSuccess(flow);
            res.json(response.status, response.body);
            res.end();
        });
    },
    deleteFlow: function (req, res) {
        var flowId = req.params.flowId;
        logger_1.logger.debug("Delete mind-flow: " + flowId);
        mongo_connector_1.MongoMindFlow.findByIdAndRemove(flowId, function (err, retVal) {
            if (err) return res.json(500, { message: 'ERROR', content: err });
            var response = retVal == null && model_1.Response.aError({ message: 'mind-flow not found' }) || model_1.Response.aSuccess(retVal);
            res.json(response.status, response.body);
            res.end();
        });
    },
    updateFlow: function (req, res) {
        var flowId = req.params.flowId;
        var body = req.body;
        logger_1.logger.debug("Update mind-flow: " + flowId);
        if (body) {
            mongo_connector_1.MongoMindFlow.findByIdAndUpdate(flowId, { $set: body }, function (err, retVal) {
                if (err) return res.json(500, { message: 'ERROR', content: err });
                var response = retVal == null && model_1.Response.aError({ message: 'mind-flow not found' }) || model_1.Response.aSuccess();
                res.json(response.status, response.body);
                res.end();
            });
        }
    },
    addStep: function (req, res) {
        var body = req.body;
        var id = req.params.flowId;
        logger_1.logger.debug("AddRootStep to mindFlow: " + id);
        console.log(JSON.stringify(body));
        if (body) {
            mongo_connector_1.MongoMindFlow.findOne({ _id: id }, function (err, mindFlow) {
                if (mindFlow) {
                    mindFlow.rootSteps.push(body);
                    mongo_connector_1.MongoMindFlow.findByIdAndUpdate(id, { $set: mindFlow }, function (err, retVal) {
                        if (err) return res.json(500, { message: 'ERROR', content: err });
                        var response = retVal == null && model_1.Response.aError({ message: 'mindFlow not found' }) || model_1.Response.aSuccess();
                        res.json(response.status, response.body);
                        res.end();
                    });
                } else {
                    var response = model_1.Response.aError({ message: 'mindFlow not found' });
                    res.json(response.status, response.body);
                    res.end();
                }
            });
        }
    },
    deleteStep: function (req, res) {
        var body = req.body;
        var id = req.params.flowId;
        logger_1.logger.debug("Remove RootStep from MindFlow: " + id);
        if (body) {
            mongo_connector_1.MongoMindFlow.findOne({ _id: id }, function (err, mindFlow) {
                if (mindFlow) {
                    for (var idx = 0; idx < mindFlow.rootSteps.length; idx++) {
                        if (mindFlow.rootSteps[idx].concern === body.concern) {
                            var step = mindFlow.rootSteps.splice(idx);
                            logger_1.logger.debug("Removing " + step);
                            mongo_connector_1.MongoMindFlow.findByIdAndUpdate(id, { $set: mindFlow }, function (err, retVal) {
                                return defaultUpdate(res, err, retVal);
                            });
                        }
                    }
                }
            });
        } else {
            var response = model_1.Response.aError({ message: 'concept not found' });
            res.json(response.status, response.body);
            res.end();
        }
    }
};
exports.MindFlowController = MindFlowController;
//---------------------privates----------------------------
function defaultUpdate(res, err, retVal) {
    if (err) return res.json(500, { message: 'ERROR', content: err });
    var response = retVal == null && new model_1.Response(500, {
        message: 'item not found',
        content: {}
    }) || new model_1.Response(200, { message: 'updated', content: {} });
    res.json(response.status, response.body);
    res.end();
}
//# sourceMappingURL=data:application/json;base64,
