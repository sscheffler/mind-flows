"use strict";

var FlowStep = function () {
    function FlowStep(concern) {
        this.childs = [];
        this.concern = concern;
    }
    return FlowStep;
}();
exports.FlowStep = FlowStep;
var MindFlow = function () {
    function MindFlow(name, comment, visibiliyPublic) {
        this.rootSteps = [];
        this.linkedConcepts = [];
        this.name = name;
        this.comment = comment;
        this.visibiliyPublic = visibiliyPublic;
    }
    return MindFlow;
}();
exports.MindFlow = MindFlow;
var Concept = function () {
    function Concept(name, comment, visibiliyPublic, userId) {
        this.rootSteps = [];
        this.linkedConcepts = [];
        this.name = name;
        this.comment = comment;
        this.visibiliyPublic = visibiliyPublic;
        this.userId = userId;
    }
    return Concept;
}();
exports.Concept = Concept;
var Administrator = function () {
    function Administrator(email, login, passwd) {
        this.email = email;
        this.login = login;
        this.passwd = passwd;
    }
    return Administrator;
}();
exports.Administrator = Administrator;
var User = function () {
    function User(email, login, passwd) {
        this.deactivated = false;
        this.flows = [];
        this.email = email;
        this.login = login;
        this.passwd = passwd;
    }
    return User;
}();
exports.User = User;
var Response = function () {
    function Response(status, body) {
        this.status = status;
        this.body = body;
    }
    Response.aError = function (content, message) {
        if (content === void 0) {
            content = {};
        }
        if (message === void 0) {
            message = 'ERROR';
        }
        return new Response(500, {
            message: message,
            content: content
        });
    };
    Response.aSuccess = function (content, message) {
        if (content === void 0) {
            content = {};
        }
        if (message === void 0) {
            message = 'OK';
        }
        return new Response(200, {
            message: message,
            content: content
        });
    };
    return Response;
}();
exports.Response = Response;
var UserGroup = function () {
    function UserGroup(name) {
        this.name = name;
    }
    return UserGroup;
}();
exports.UserGroup = UserGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsL21vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQVdBLElBQUEsV0FBQSxZQUFBO0FBSUUsYUFBQSxRQUFBLENBQVksT0FBWixFQUEyQjtBQUYzQixhQUFBLE1BQUEsR0FBMEIsRUFBMUI7QUFHRSxhQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0Q7QUFDSCxXQUFBLFFBQUE7QUFQQSxDQUFBLEVBQUE7QUFBYSxRQUFBLFFBQUEsR0FBUSxRQUFSO0FBU2IsSUFBQSxXQUFBLFlBQUE7QUFRRSxhQUFBLFFBQUEsQ0FBWSxJQUFaLEVBQTBCLE9BQTFCLEVBQTJDLGVBQTNDLEVBQW1FO0FBSG5FLGFBQUEsU0FBQSxHQUE2QixFQUE3QjtBQUNBLGFBQUEsY0FBQSxHQUFpQyxFQUFqQztBQUdFLGFBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxhQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsYUFBSyxlQUFMLEdBQXVCLGVBQXZCO0FBQ0Q7QUFDSCxXQUFBLFFBQUE7QUFiQSxDQUFBLEVBQUE7QUFBYSxRQUFBLFFBQUEsR0FBUSxRQUFSO0FBZWIsSUFBQSxVQUFBLFlBQUE7QUFTRSxhQUFBLE9BQUEsQ0FBWSxJQUFaLEVBQTBCLE9BQTFCLEVBQTJDLGVBQTNDLEVBQXFFLE1BQXJFLEVBQW1GO0FBSG5GLGFBQUEsU0FBQSxHQUE2QixFQUE3QjtBQUNBLGFBQUEsY0FBQSxHQUFpQyxFQUFqQztBQUdFLGFBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxhQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsYUFBSyxlQUFMLEdBQXVCLGVBQXZCO0FBQ0EsYUFBSyxNQUFMLEdBQWMsTUFBZDtBQUNEO0FBQ0gsV0FBQSxPQUFBO0FBZkEsQ0FBQSxFQUFBO0FBQWEsUUFBQSxPQUFBLEdBQU8sT0FBUDtBQWtCYixJQUFBLGdCQUFBLFlBQUE7QUFNRSxhQUFBLGFBQUEsQ0FBWSxLQUFaLEVBQTJCLEtBQTNCLEVBQTBDLE1BQTFDLEVBQXdEO0FBQ3RELGFBQUssS0FBTCxHQUFhLEtBQWI7QUFDQSxhQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsYUFBSyxNQUFMLEdBQWMsTUFBZDtBQUNEO0FBQ0gsV0FBQSxhQUFBO0FBWEEsQ0FBQSxFQUFBO0FBQWEsUUFBQSxhQUFBLEdBQWEsYUFBYjtBQWFiLElBQUEsT0FBQSxZQUFBO0FBU0UsYUFBQSxJQUFBLENBQVksS0FBWixFQUEyQixLQUEzQixFQUEwQyxNQUExQyxFQUF3RDtBQUh4RCxhQUFBLFdBQUEsR0FBdUIsS0FBdkI7QUFDQSxhQUFBLEtBQUEsR0FBOEIsRUFBOUI7QUFHRSxhQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsYUFBSyxLQUFMLEdBQWEsS0FBYjtBQUNBLGFBQUssTUFBTCxHQUFjLE1BQWQ7QUFDRDtBQUNILFdBQUEsSUFBQTtBQWRBLENBQUEsRUFBQTtBQUFhLFFBQUEsSUFBQSxHQUFJLElBQUo7QUFnQmIsSUFBQSxXQUFBLFlBQUE7QUFxQkUsYUFBQSxRQUFBLENBQVksTUFBWixFQUE0QixJQUE1QixFQUFpRTtBQUMvRCxhQUFLLE1BQUwsR0FBYyxNQUFkO0FBQ0EsYUFBSyxJQUFMLEdBQVksSUFBWjtBQUNEO0FBakJNLGFBQUEsTUFBQSxHQUFTLFVBQVMsT0FBVCxFQUE0QixPQUE1QixFQUFxRDtBQUE1QyxZQUFBLFlBQUEsS0FBQSxDQUFBLEVBQWlCO0FBQWpCLHNCQUFBLEVBQUE7QUFBaUI7QUFBRSxZQUFBLFlBQUEsS0FBQSxDQUFBLEVBQXlCO0FBQXpCLHNCQUFBLE9BQUE7QUFBeUI7QUFDbkUsZUFBTyxJQUFJLFFBQUosQ0FBYSxHQUFiLEVBQWtCO0FBQ3ZCLHFCQUFTLE9BRGM7QUFFdkIscUJBQVM7QUFGYyxTQUFsQixDQUFQO0FBSUQsS0FMTTtBQU9BLGFBQUEsUUFBQSxHQUFXLFVBQVMsT0FBVCxFQUE0QixPQUE1QixFQUFrRDtBQUF6QyxZQUFBLFlBQUEsS0FBQSxDQUFBLEVBQWlCO0FBQWpCLHNCQUFBLEVBQUE7QUFBaUI7QUFBRSxZQUFBLFlBQUEsS0FBQSxDQUFBLEVBQXNCO0FBQXRCLHNCQUFBLElBQUE7QUFBc0I7QUFDbEUsZUFBTyxJQUFJLFFBQUosQ0FBYSxHQUFiLEVBQWtCO0FBQ3ZCLHFCQUFTLE9BRGM7QUFFdkIscUJBQVM7QUFGYyxTQUFsQixDQUFQO0FBSUQsS0FMTTtBQVdULFdBQUEsUUFBQTtBQXpCQSxDQUFBLEVBQUE7QUFBYSxRQUFBLFFBQUEsR0FBUSxRQUFSO0FBMkJiLElBQUEsWUFBQSxZQUFBO0FBS0UsYUFBQSxTQUFBLENBQVksSUFBWixFQUF3QjtBQUN0QixhQUFLLElBQUwsR0FBWSxJQUFaO0FBQ0Q7QUFDSCxXQUFBLFNBQUE7QUFSQSxDQUFBLEVBQUE7QUFBYSxRQUFBLFNBQUEsR0FBUyxTQUFUIiwiZmlsZSI6Im1vZGVsL21vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmludGVyZmFjZSBJSWQge1xuICBpZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YWtlaG9sZGVyIHsgZW1haWw6IHN0cmluZzsgbG9naW46IHN0cmluZzsgcGFzc3dkOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEtub3dsZWRnZUZsb3cgeyBuYW1lOiBzdHJpbmc7IGNvbW1lbnQ6IHN0cmluZzsgcm9vdFN0ZXBzOiBBcnJheTxGbG93U3RlcD47IHZpc2liaWxpeVB1YmxpYzogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgRmxvd1N0ZXAge1xuICBjb25jZXJuOiBzdHJpbmc7XG4gIGNoaWxkczogQXJyYXk8Rmxvd1N0ZXA+ID0gW107XG5cbiAgY29uc3RydWN0b3IoY29uY2Vybjogc3RyaW5nKSB7XG4gICAgdGhpcy5jb25jZXJuID0gY29uY2VybjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWluZEZsb3cgaW1wbGVtZW50cyBJSWQsIEtub3dsZWRnZUZsb3cge1xuICB2aXNpYmlsaXlQdWJsaWM6IGJvb2xlYW47XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgY29tbWVudDogc3RyaW5nO1xuICByb290U3RlcHM6IEFycmF5PEZsb3dTdGVwPiA9IFtdO1xuICBsaW5rZWRDb25jZXB0czogQXJyYXk8Q29uY2VwdD4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGNvbW1lbnQ6IHN0cmluZywgdmlzaWJpbGl5UHVibGljOiBib29sZWFuKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNvbW1lbnQgPSBjb21tZW50O1xuICAgIHRoaXMudmlzaWJpbGl5UHVibGljID0gdmlzaWJpbGl5UHVibGljO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25jZXB0IGltcGxlbWVudHMgSUlkLCBLbm93bGVkZ2VGbG93IHtcbiAgdmlzaWJpbGl5UHVibGljOiBib29sZWFuO1xuICB1c2VySWQ6IHN0cmluZztcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBjb21tZW50OiBzdHJpbmc7XG4gIHJvb3RTdGVwczogQXJyYXk8Rmxvd1N0ZXA+ID0gW107XG4gIGxpbmtlZENvbmNlcHRzOiBBcnJheTxDb25jZXB0PiA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgY29tbWVudDogc3RyaW5nLCB2aXNpYmlsaXlQdWJsaWM6IGJvb2xlYW4sIHVzZXJJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmNvbW1lbnQgPSBjb21tZW50O1xuICAgIHRoaXMudmlzaWJpbGl5UHVibGljID0gdmlzaWJpbGl5UHVibGljO1xuICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xuICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIEFkbWluaXN0cmF0b3IgaW1wbGVtZW50cyBJSWQsIFN0YWtlaG9sZGVyIHtcbiAgaWQ6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgbG9naW46IHN0cmluZztcbiAgcGFzc3dkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZW1haWw6IHN0cmluZywgbG9naW46IHN0cmluZywgcGFzc3dkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmVtYWlsID0gZW1haWw7XG4gICAgdGhpcy5sb2dpbiA9IGxvZ2luO1xuICAgIHRoaXMucGFzc3dkID0gcGFzc3dkO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVc2VyIGltcGxlbWVudHMgSUlkLCBTdGFrZWhvbGRlciB7XG4gIGlkOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGxvZ2luOiBzdHJpbmc7XG4gIHBhc3N3ZDogc3RyaW5nO1xuICBncmF2YXRhclVybDogc3RyaW5nO1xuICBkZWFjdGl2YXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBmbG93czogQXJyYXk8S25vd2xlZGdlRmxvdz4gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihlbWFpbDogc3RyaW5nLCBsb2dpbjogc3RyaW5nLCBwYXNzd2Q6IHN0cmluZykge1xuICAgIHRoaXMuZW1haWwgPSBlbWFpbDtcbiAgICB0aGlzLmxvZ2luID0gbG9naW47XG4gICAgdGhpcy5wYXNzd2QgPSBwYXNzd2Q7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlIHtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIGJvZHk6IHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgY29udGVudDogYW55XG4gIH07XG5cbiAgc3RhdGljIGFFcnJvciA9IGZ1bmN0aW9uKGNvbnRlbnQ6IGFueSA9IHt9LCBtZXNzYWdlOiBzdHJpbmcgPSAnRVJST1InKXtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKDUwMCwge1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9KTtcbiAgfTtcblxuICBzdGF0aWMgYVN1Y2Nlc3MgPSBmdW5jdGlvbihjb250ZW50OiBhbnkgPSB7fSwgbWVzc2FnZTogc3RyaW5nID0gJ09LJyl7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSgyMDAsIHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBjb250ZW50OiBjb250ZW50XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3RydWN0b3Ioc3RhdHVzOiBudW1iZXIsIGJvZHk6IHttZXNzYWdlOiBzdHJpbmc7IGNvbnRlbnQ6IGFueX0pIHtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVc2VyR3JvdXAgaW1wbGVtZW50cyBJSWQge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHVzZXJzOiBBcnJheTxVc2VyPjtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
