"use strict";

var mongo_connector_1 = require("../../backend/mongo-connector");
var model_1 = require("../../../model/model");
var logger_1 = require("../../logger");
var UserController = {
    findAll: function (req, res) {
        logger_1.logger.debug("Retrieving all users");
        mongo_connector_1.MongoUser.find({}, function (err, users) {
            if (err) return res.json(500, { message: 'ERROR', content: err });
            var response = model_1.Response.aSuccess(users);
            res.json(response.status, response.body);
            res.end();
        });
    },
    findById: function (req, res) {
        var id = req.params.userId;
        logger_1.logger.debug("Search for user : " + id);
        mongo_connector_1.MongoUser.findOne({ _id: id }, function (err, user) {
            var response = err && model_1.Response.aError(err) || model_1.Response.aSuccess(user);
            res.json(response.status, response.body);
            res.end();
        });
    },
    create: function (req, res) {
        var body = req.body;
        if (body) {
            logger_1.logger.debug("Create user: " + body);
            body.deactivated = false;
            var mongoUser = new mongo_connector_1.MongoUser(body);
            mongoUser.save(function (err, user) {
                var response = err && model_1.Response.aError(err) || model_1.Response.aSuccess(user);
                res.json(response.status, response.body);
                res.end();
            });
        }
    },
    update: function (req, res) {
        var body = req.body;
        var id = req.params.userId;
        logger_1.logger.debug("Update user : " + id);
        if (body) {
            mongo_connector_1.MongoUser.findByIdAndUpdate(id, { $set: body }, function (err, retVal) {
                if (err) return res.json(500, { message: 'ERROR', content: err });
                var response = retVal == null && model_1.Response.aError({ message: 'User not found' }) || model_1.Response.aSuccess();
                res.json(response.status, response.body);
                res.end();
            });
        }
    },
    deleteUser: function (req, res) {
        var id = req.params.userId;
        logger_1.logger.debug("Delete user : " + id);
        mongo_connector_1.MongoUser.findByIdAndRemove(id, function (err, retVal) {
            if (err) return res.json(500, { message: 'ERROR', content: err });
            var response = retVal == null && model_1.Response.aError({ message: 'User not found' }) || model_1.Response.aSuccess(retVal);
            res.json(response.status, response.body);
            res.end();
        });
    },
    emailExists: function (req, res) {
        logger_1.logger.debug("Find user bey email " + req.params.email);
        mongo_connector_1.MongoUser.find({ email: req.params.email }, function (err, users) {
            if (err) return res.json(500, { message: 'ERROR', content: err });
            var response = users.length > 1 && model_1.Response.aSuccess({ found: true }) || model_1.Response.aSuccess({ found: false });
            res.json(response.status, response.body);
            res.end();
        });
    }
};
exports.UserController = UserController;
//# sourceMappingURL=data:application/json;base64,
